name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            platform: linux/amd64
            ext: ""
            name: krokodyl-linux
            build_flags: "-tags webkit2_41"
          - os: windows-latest
            platform: windows/amd64
            ext: ".exe"
            name: krokodyl-windows.exe
            build_flags: ""
          - os: macos-latest
            platform: darwin/universal
            ext: ""
            name: krokodyl-macos
            build_flags: ""
    
    runs-on: ${{ matrix.os }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
          
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Install system dependencies (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc libgtk-3-dev libwebkit2gtk-4.1-dev
          
      - name: Install Wails
        run: go install github.com/wailsapp/wails/v2/cmd/wails@latest
        
      - name: Install dependencies
        run: |
          cd frontend
          npm install
          
      - name: Build application
        run: wails build -platform ${{ matrix.platform }} ${{ matrix.build_flags }} -o krokodyl${{ matrix.ext }}
        
      - name: Prepare macOS artifact
        if: matrix.os == 'macos-latest'
        run: |
          if [ -d "build/bin/krokodyl.app" ]; then
            # Create a proper macOS app bundle for distribution
            tar -czf krokodyl-macos.tar.gz -C build/bin krokodyl.app
            mv krokodyl-macos.tar.gz build/bin/krokodyl-macos.tar.gz
          else
            # Fallback if no app bundle is created
            mv build/bin/krokodyl build/bin/krokodyl-macos
          fi
        
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.name }}
          path: |
            build/bin/krokodyl${{ matrix.ext }}
            build/bin/krokodyl-macos.tar.gz
          retention-days: 1

  release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          
      - name: Prepare release assets
        run: |
          mkdir -p release
          # Linux
          if [ -f "artifacts/krokodyl-linux/krokodyl" ]; then
            cp artifacts/krokodyl-linux/krokodyl release/krokodyl-linux
            chmod +x release/krokodyl-linux
          fi
          # Windows
          if [ -f "artifacts/krokodyl-windows.exe/krokodyl.exe" ]; then
            cp artifacts/krokodyl-windows.exe/krokodyl.exe release/krokodyl-windows.exe
          fi
          # macOS
          if [ -f "artifacts/krokodyl-macos/krokodyl-macos.tar.gz" ]; then
            cp artifacts/krokodyl-macos/krokodyl-macos.tar.gz release/krokodyl-macos.tar.gz
          elif [ -f "artifacts/krokodyl-macos/krokodyl-macos" ]; then
            cp artifacts/krokodyl-macos/krokodyl-macos release/krokodyl-macos
            chmod +x release/krokodyl-macos
          fi
          
      - name: Create release
        uses: softprops/action-gh-release@v2
        with:
          files: release/*
          generate_release_notes: true
          fail_on_unmatched_files: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}